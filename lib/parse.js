// Generated by CoffeeScript 1.6.3
(function() {
  var to_array, to_object, to_value;

  to_value = function(value) {
    switch (value) {
      case 'none':
        return null;
      case 'on':
        return true;
      case 'off':
        return false;
      case 'true':
        return true;
      case 'false':
        return false;
      default:
        return value;
    }
  };

  to_object = function(previous, current) {
    var key, val;
    if (current) {
      for (key in current) {
        val = current[key];
        previous[key] = to_value(val);
      }
    }
    return previous;
  };

  to_array = function(previous, current) {
    var key, val;
    if (previous.length === 0 || current === null) {
      previous.push({});
    }
    if (current) {
      for (key in current) {
        val = current[key];
        previous[previous.length - 1][key] = to_value(val);
      }
    }
    return previous;
  };

  /*
  	@param {string} info
  */


  exports.linebreak_list = function(input) {
    var to_item;
    to_item = function(line) {
      if (!line) {
        return null;
      }
      line = line.replace(/^(.+?):\s*/, '"$1":"') + '"';
      return JSON.parse("{" + line + "}");
    };
    return input.split('\n').map(to_item).reduce(to_array, []).filter(function(item) {
      return Object.keys(item).length > 0;
    });
  };

  /*
  	* @param {string} input
  */


  exports.namepair_list = function(input) {
    var to_item;
    to_item = function(line) {
      line = line.replace(/" {/, '":"{');
      if (line) {
        line = line + '"';
      }
      return JSON.parse("{" + line + "}");
    };
    return input.split('\n').map(to_item).reduce(to_object);
  };

  /*
  	* @param {string} input
  */


  exports.machinereadable_list = function(input) {
    var to_item;
    to_item = function(line) {
      if (line[0] !== '"') {
        line = line.replace(/^(.+)=/, '"$1"=');
      }
      line = line.replace(/^(".+")=/, '$1:');
      line = line.replace(/^(.+):\d+,/, '$1:0.');
      line = line.replace(/"@.*$/, '"');
      line = line.replace(/:(\d+x\d+)$/, ':"$1"');
      line = line.replace(/:$/, ':null');
      return JSON.parse("{" + line + "}");
    };
    return input.split('\n').map(to_item).reduce(to_object);
  };

  /*
  	* @param {string} input
  */


  exports.property_list = function(input) {
    var to_item;
    to_item = function(line) {
      var item, match;
      item = {};
      if (!line) {
        return item;
      }
      match = line.match(/^Name:\s*(.*?),\s*value:\s*(.*?),\s*timestamp:\s*(.*?),\s*flags:\s*(.*?)$/);
      if (!match) {
        return item;
      }
      item[match[1]] = {
        value: to_value(match[2]),
        timestamp: parseInt(match[3]),
        flags: match[4].split(',').map(function(token) {
          return token.trim();
        })
      };
      return item;
    };
    return input.split('\n').map(to_item).reduce(to_object);
  };

  /*
  	* @param {string} input
  */


  exports.version_info = function(input) {
    var item, match;
    item = {
      major: 0,
      minor: 0,
      build: ''
    };
    if (!input) {
      return item;
    }
    match = /(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9][\da-z\-]*)\b/ig.exec(input.toString());
    if (!match) {
      return item;
    }
    item = {
      major: parseInt(match[1]),
      minor: parseInt(match[2]),
      build: match[3]
    };
    return item;
  };

}).call(this);
